/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package testgui_dec17;
import javax.swing.*;
import java.awt.*;
import static java.lang.Integer.parseInt;
import java.util.ArrayList;
import static testgui_dec17.NewJFrame.p1;
import static testgui_dec17.NewJFrame.p3;
import static testgui_dec17.NewJFrame.tar;
/**
 *
 * @author Dániel
 */
public class Kereses extends javax.swing.JPanel {
    String neve, kat;
    int min, max;
    /**
     * Creates new form Kereses
     */
    public Kereses() {
        initComponents();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nev = new javax.swing.JTextField();
        kateg = new javax.swing.JTextField();
        minim = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        maxim = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        Kereses = new javax.swing.JButton();

        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        setMinimumSize(new java.awt.Dimension(850, 600));
        setPreferredSize(new java.awt.Dimension(850, 600));

        minim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minimActionPerformed(evt);
            }
        });

        jLabel1.setText("Kategória szerint");

        jLabel2.setText("Név szerint");

        jLabel3.setText("Ár:");

        jLabel4.setText("Min:");

        jLabel5.setText("Max");

        maxim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maximActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        Kereses.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Kereses.setText("Keresés");
        Kereses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KeresesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(122, 122, 122))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(minim, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(maxim, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(nev, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(kateg, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(88, 88, 88)
                        .addComponent(Kereses, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(167, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nev, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kateg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(minim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(maxim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Kereses, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void minimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minimActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minimActionPerformed

    private void maximActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maximActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maximActionPerformed

    private void KeresesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KeresesActionPerformed
             if(nev.getText() != null && !nev.getText().isEmpty()){
                 neve = nev.getText();
             }
             if(kateg.getText() != null && !kateg.getText().isEmpty()){
                 kat = kateg.getText();
             }
             if(minim.getText() != null && !minim.getText().isEmpty()){
                 min = parseInt(minim.getText());
             }
             else{
                 min = 0;
             }
             if(maxim.getText() != null && !maxim.getText().isEmpty()){
                 max = parseInt(maxim.getText());
             }
             else{
                 max = 0;
             }
             
            ArrayList<String> searchList = new ArrayList<String>();
            if(searchList.size()!=0){
                for(int k=0;k<searchList.size();k++){
                        searchList.remove(k);
                    }
            }
            if(neve != null && !neve.isEmpty()){
                for(int i=0;i<tar.TombSize;i++){
                    if(tar.termekTomb[i].nev.contains(neve)){
                        searchList.add(tar.termekTomb[i].ID+" / "+
                                tar.termekTomb[i].nev+" / "+
                                tar.termekTomb[i].kategoria+" / "+
                                String.valueOf(tar.termekTomb[i].ar)+"FT / "+
                                String.valueOf(tar.termekTomb[i].darab)+" DB");
                    }
                }
                DefaultListModel<String> searchModel = new DefaultListModel<>();
                
                if(searchList.size()!=0){
                    for(int k=0;k<searchList.size();k++){
                        searchModel.addElement(searchList.get(k));
                    }
                    jList1.setModel(searchModel);
                }   
            }
            nev.setText("");
            
            
            
            if(searchList.size()!=0){
                for(int k=0;k<searchList.size();k++){
                        searchList.remove(k);
                    }
            }
            if(kat != null && !kat.isEmpty()){
                for(int i=0;i<tar.TombSize;i++){
                    if(tar.termekTomb[i].kategoria.contains(kat)){
                        searchList.add(tar.termekTomb[i].ID+" / "+
                                tar.termekTomb[i].nev+" / "+
                                tar.termekTomb[i].kategoria+" / "+
                                String.valueOf(tar.termekTomb[i].ar)+"FT / "+
                                String.valueOf(tar.termekTomb[i].darab)+" DB");
                    }
                }
                DefaultListModel<String> searchModel = new DefaultListModel<>();
                
                if(searchList.size()!=0){
                    for(int k=0;k<searchList.size();k++){
                        searchModel.addElement(searchList.get(k));
                    }
                    jList1.setModel(searchModel);
                } 
                kateg.setText("");
            }
            
            
            
            
            if(searchList.size()!=0){
                for(int k=0;k<searchList.size();k++){
                        searchList.remove(k);
                    }
            }
            if(minim.getText() != null && !minim.getText().isEmpty() &&
                    maxim.getText() != null && !maxim.getText().isEmpty()){
                for(int i=0;i<tar.TombSize;i++){
                    if(tar.termekTomb[i].ar>=min && tar.termekTomb[i].ar<=max){
                        searchList.add(tar.termekTomb[i].ID+" / "+
                                tar.termekTomb[i].nev+" / "+
                                tar.termekTomb[i].kategoria+" / "+
                                String.valueOf(tar.termekTomb[i].ar)+"FT / "+
                                String.valueOf(tar.termekTomb[i].darab)+" DB");
                    }
                }
                DefaultListModel<String> searchModel = new DefaultListModel<>();
                
                if(searchList.size()!=0){
                    for(int k=0;k<searchList.size();k++){
                        searchModel.addElement(searchList.get(k));
                    }
                    jList1.setModel(searchModel);
                }
                minim.setText("");
                maxim.setText("");
            }
            
            
    }//GEN-LAST:event_KeresesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton Kereses;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel4;
    public javax.swing.JLabel jLabel5;
    public javax.swing.JList<String> jList1;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTextField kateg;
    public javax.swing.JTextField maxim;
    public javax.swing.JTextField minim;
    public javax.swing.JTextField nev;
    // End of variables declaration//GEN-END:variables
}
